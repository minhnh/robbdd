import "lab.scene"

ns bdd_var='https://secorolab.github.io/models/acceptance-criteria/bdd/variants/pickplace-isaac/'
ns bdd_tmpl='https://secorolab.github.io/models/acceptance-criteria/bdd/templates/'

Task (ns=bdd_tmpl) tsk_pickplace
Event (ns=bdd_tmpl) evt_scenario_start
Event (ns=bdd_tmpl) evt_pick_start
Event (ns=bdd_tmpl) evt_place_end
Event (ns=bdd_tmpl) evt_scenario_end

const set (ns=bdd_var) sort_ws_set {
    <lab_workspaces.container_1_ws>, <lab_workspaces.container_2_ws>
}

Scenario Template (ns=bdd_tmpl) tmpl_sort {
    task: <tsk_pickplace>

    set var target_objects
    set var place_workspaces
    var robot
    var pick_ws

    for all ( var x in <target_objects> ) {
        Given:
        (
            holds(<x> is located at <pick_ws>, before <evt_pick_start>)
        )
        When:
            Behaviour (ns=bdd_tmpl) pickplace: <robot> picks <x> and places at <place_workspaces>
        Then:
            ( var y exists in <place_workspaces> ) such that {
                holds(<x> is located at <y>, after <evt_place_end>)
            }
    }
    Then:
        holds(<target_objects> are sorted into <place_workspaces>, after <evt_place_end>)
}

User Story (ns=bdd_var) us_pickplace_single_arm {
    As A "Function Developer"
    I Want "Pick and place behaviour"
    So That "I can transport objects"

    Scenarios:
        Scenario simple_pick {
            template: <tmpl_sort>
            scene: <sorting_scene>

            variation:
                set var <tmpl_sort.target_objects>: select 3 combinations from <pickplace_objects>
                var <tmpl_sort.pick_ws>: {
                    <lab_workspaces.table_ws>, <lab_workspaces.shelf_ws>
                }
                set var <tmpl_sort.place_workspaces>: select 2 combinations from <sort_ws_set>
                var <tmpl_sort.robot>: agn set <isaac_agents>
        }
}
