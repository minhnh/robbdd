import base
import scene

Model:
imports*=Import

namespaces=NamespaceDeclare*

(
behaviours+=Behaviour
|
events+=Event
|
tasks+=Task
)*

(
templates+=ScenarioTemplate
|
stories+=UserStory
)+
;

Behaviour: 'Behaviour' name=ID ;

Event: 'Event' name=ID ;

Task: 'Task' name=ID ;

UserStory:
'User' 'Story' '(' 'ns' '=' ns=[NamespaceDeclare|FQN] ')'  name=ID '{'

'As' 'A' role=STRING
'I' 'Want' feature=STRING
'So' 'That' benefit=STRING

'Scenarios' ':'
    scenarios=ScenarioVariant+
'}'
;

ScenarioVariant:
'Scenario' name=ID '{'
    'template' ':' '<' template=[ScenarioTemplate|FQN] '>'
    'scene' ':' '<' scene=[SceneModel|FQN] '>'
    'task' ':' '<' task=[Task|FQN] '>'

    (variations=TaskVariation+)?

    ('Given' ':' given_clauses=Clause+)?
    ('When' ':' when_event_clauses=EventWhenClause+)?
    ('Then' ':' then_clauses=Clause+)?
'}'
;

TaskVariation: CartesianProductVariation | TableVariation ;

CartesianProductVariation: 'var' '<' variable=[ScenarioVariable|FQN] '>' 'can' 'be' ':'
(
'-' 'obj' '<' objects+=[Object|FQN] '>'
|
'-' 'ws' '<' workspaces+=[Workspace|FQN] '>'
|
'-' 'agn' '<' agents+=[Agent|FQN] '>'
)*
;

TableVariation: rows+=Row ;

Row: '|' cells+=Cell ;

Cell: Value '|' ;

Value:
(
'var' '<' value=[ScenarioVariable|FQN] '>'
|
'obj' '<' value=[Object|FQN] '>'
|
'ws' '<' value=[Workspace|FQN] '>'
|
'agn' '<' value=[Agent|FQN] '>'
)
;

ScenarioTemplate:
'Scenario' 'Template' '(' 'ns' '=' ns=[NamespaceDeclare|FQN] ')' name=ID '{'
    variables=ScenarioVariable*

    'Given' ':'
        given_clauses=Clause+

    'When' ':'
        when_event_clauses=EventWhenClause*
        when_behaviour=BehaviourWhenClause

    'Then' ':'
        then_clauses=Clause+
'}'
;

ScenarioVariable: 'var' name=ID;

// When Clauses
EventWhenClause: 'event' '<' event=[Event|FQN] '>' 'occurs';

BehaviourWhenClause: AgentBehaviourWhenClause ;
AgentBehaviourWhenClause: '<' behaviour=[Behaviour|FQN] '>' 'occurs' ;

// Time constraints
TimeConstraint: BeforeEvent | AfterEvent | DuringEvent ;
BeforeEvent: 'before' '<' event=[Event|FQN] '>';
AfterEvent: 'after' '<' event=[Event|FQN] '>';
DuringEvent: 'during' '<' event=[Event|FQN] '>';

// Given/Then clauses
Clause: LocatedAtFluentClause | DoesNotDropFluentClause | TextClause;
TextClause: text=STRING tc=TimeConstraint;
LocatedAtFluentClause:
    '<' object=[ScenarioVariable|FQN] '>' 'is' 'located' 'at' '<' workspace=[ScenarioVariable|FQN] '>'
    tc=TimeConstraint ;
DoesNotDropFluentClause:
    '<' agent=[ScenarioVariable|FQN] '>' 'does' 'not' 'drop' '<' object=[ScenarioVariable|FQN] '>'
    tc=TimeConstraint ;
