import base
import scene

Model:
imports*=Import

namespaces=NamespaceDeclare*

(
behaviours+=Behaviour
|
events+=Event
|
tasks+=Task
)*

(
templates+=ScenarioTemplate
|
stories+=UserStory
)+
;

Behaviour: 'Behaviour' name=ID ;

Event: 'Event' name=ID ;

Task: 'Task' name=ID ;

UserStory:
'User' 'Story' '(' 'ns' '=' ns=[NamespaceDeclare|FQN] ')'  name=ID '{'

'As' 'A' role=STRING
'I' 'Want' feature=STRING
'So' 'That' benefit=STRING

'Scenarios' ':'
    scenarios=ScenarioVariant+
'}'
;

ScenarioVariant:
'Scenario' name=ID '{'
    'template' ':' '<' template=[ScenarioTemplate|FQN] '>'
    'scene' ':' '<' scene=[SceneModel|FQN] '>'
    'task' ':' '<' task=[Task|FQN] '>'

    (variation=TaskVariation)?

    ('Given' ':' given_clauses=Clause+)?
    ('When' ':' when_event_clauses=EventWhenClause+)?
    ('Then' ':' then_clauses=Clause+)?
'}'
;

TaskVariation: CartesianProductVariation | TableVariation ;

CartesianProductVariation: var_entries+=VarEntry ;

VarEntry: 'var' '<' variable=[ScenarioVariable|FQN] '>' 'can' 'be' ':'
(
'-' 'obj' '<' objects+=[Object|FQN] '>'
|
'-' 'ws' '<' workspaces+=[Workspace|FQN] '>'
|
'-' 'agn' '<' agents+=[Agent|FQN] '>'
)*
;

TableVariation: rows+=Row ;

Row: '|' cells+=Cell ;

Cell: Value '|' ;

Value:
(
'var' '<' variable=[ScenarioVariable|FQN] '>'
|
'obj' '<' object=[Object|FQN] '>'
|
'ws' '<' workspace=[Workspace|FQN] '>'
|
'agn' '<' agent=[Agent|FQN] '>'
)
;

ScenarioTemplate:
'Scenario' 'Template' '(' 'ns' '=' ns=[NamespaceDeclare|FQN] ')' name=ID '{'
    variables=ScenarioVariable*
    gwt_expr=GivenWhenThenExpr
'}'
;

ScenarioVariable: 'var' name=ID;

// When Clauses
EventWhenClause: 'event' '<' event=[Event|FQN] '>' 'occurs';

BehaviourWhenClause: AgentBehaviourWhenClause ;
AgentBehaviourWhenClause: '<' behaviour=[Behaviour|FQN] '>' 'occurs' ;

// Time constraints
TimeConstraint: BeforeEvent | AfterEvent | DuringEvent ;
BeforeEvent: 'before' '<' event=[Event|FQN] '>';
AfterEvent: 'after' '<' event=[Event|FQN] '>';
DuringEvent: 'during' '<' event=[Event|FQN] '>';

// Given/Then clauses
Clause: LocatedAtFluentClause | DoesNotDropFluentClause | TextClause | FluentLogicExpr | ExistsExpr ;
TextClause: text=STRING tc=TimeConstraint;
LocatedAtFluentClause:
    '<' object=[ScenarioVariable|FQN] '>' 'is' 'located' 'at' '<' workspace=[ScenarioVariable|FQN] '>'
    tc=TimeConstraint ;
DoesNotDropFluentClause:
    '<' agent=[ScenarioVariable|FQN] '>' 'does' 'not' 'drop' '<' object=[ScenarioVariable|FQN] '>'
    tc=TimeConstraint ;

// Scenario terms
GivenExpr: 'Given' ':' given=Clause ;
WhenExpr:
    'When' ':'
        when_events=EventWhenClause*
        when_bhv=BehaviourWhenClause
;
ThenExpr: 'Then' ':' then=Clause ;
GivenWhenThenExpr:
    (given_expr=GivenExpr)?
    (
    when_expr=WhenExpr
    |
    forall_expr=ForAllExpr
    )
    (then_expr=ThenExpr)?
;

// First Order Logic terms
FOLExpr: LocatedAtPred | IsHeldPred | DoesNotDropPred | CanReachPred | HasConfigPred | IsSortedPred ;
CanReachPred:
    '<' robot=[ScenarioVariable|FQN] '>' 'can' 'reach' '<' object=[ScenarioVariable|FQN] '>'
;
LocatedAtPred:
    '<' object=[ScenarioVariable|FQN] '>' 'is' 'located' 'at' '<' workspace=[ScenarioVariable|FQN] '>'
;
DoesNotDropPred:
    '<' agent=[ScenarioVariable|FQN] '>' 'does' 'not' 'drop' '<' object=[ScenarioVariable|FQN] '>'
;
IsHeldPred:
    '<' object=[ScenarioVariable|FQN] '>' 'is' 'held' 'by' '<' agent=[ScenarioVariable|FQN] '>'
;
HasConfigPred:
    '<' subject=[ScenarioVariable|FQN] '>' 'has' 'config' '<' config=[ScenarioVariable|FQN] '>'
;
IsSortedPred:
    '<' objects=[ScenarioVariable|FQN] '>' 'is' 'sorted' 'into' '<' workspaces=[ScenarioVariable|FQN] '>'
;

// Fluent logic terms composing holds clauses with basic logic operators
FluentLogicExpr: FluentAndExpr | FluentOrExpr | FluentNotExpr | HoldsExpr ;
HoldsExpr:
'holds' '(' predicate=FOLExpr ',' tc=TimeConstraint ')'
;
FluentAndExpr:
'('
  first=FluentLogicExpr
  ('and' rest=FluentLogicExpr)*
')'
;
FluentOrExpr:
'('
  first=FluentLogicExpr
  ('or' rest=FluentLogicExpr)*
')'
;
FluentNotExpr:
'(' 'not' expr=FluentLogicExpr ')'
;


// quantifiers over fluent logic expressions
ForAllExpr:
'for' 'all' '(' var=ScenarioVariable 'in' '<' set=[ScenarioVariable|FQN] '>' ')' '{'
    GivenWhenThenExpr
'}'
;
ExistsExpr:
'(' var=ScenarioVariable 'exists' 'in' '<' set=[ScenarioVariable|FQN] '>' ')' 'such' 'that' '{'
    fluent_expr=FluentLogicExpr
'}'
;
